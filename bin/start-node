#!/bin/bash

####################################################################################################
#                                                                                                  #
# (c) 2018, 2019 Quantstamp, Inc. This content and its use are governed by the license terms at    #
# <https://s3.amazonaws.com/qsp-protocol-license/V2_LICENSE.txt>                                   #
#                                                                                                  #
####################################################################################################

set -e

UNAME_OUT="$(uname -s)"
case "${UNAME_OUT}" in
	Linux*|linux*)     readonly SCRIPT_DIR=`dirname $(realpath "$0")`;;
	Darwin*|darwin*)   readonly SCRIPT_DIR=`dirname $(python -c "from __future__ import print_function; from os.path import realpath; from sys import argv; print(realpath(\"$0\"))")`;;
	*)          echo "Cannot determine OS type. Please make sure you are using Linux or Mac. If so, please open a github issue"; exit 1
esac

readonly RESOURCES_DIR="$(dirname ${SCRIPT_DIR})/resources"

source "$SCRIPT_DIR/common"

# Check if the script is running in background
case $(ps -o stat= -p $$) in
  *+*) IN_BACKGROUND="false" ;;
  *) IN_BACKGROUND="true" ;;
esac

if [[ $(docker ps -q --filter ancestor=qsp-protocol-node) ]]; then
  echo "Stopping....."
	"$SCRIPT_DIR/stop-node"
fi

cd "$RESOURCES_DIR"

if [[ "x$QSP_ETH_PASSPHRASE" == "x" ]] ; then
  echo "Environment variable QSP_ETH_PASSPHRASE is not set" &> /dev/stderr
  exit 1
fi

if [[ "x$QSP_ETH_AUTH_TOKEN" == "x" ]] ; then
  echo "Environment variable QSP_ETH_AUTH_TOKEN is not set" &> /dev/stderr
  exit 1
fi

if [ ! -f app.tar ]; then
	echo "app.tar file not present. Exiting!!"
  exit 1
fi

touch $PWD/event_database.db

QSP_ENV="testnet"
QSP_CONFIG="resources/config.yaml"

rotate_logs
touch $LOG_PATH

docker load --input app.tar && \
docker run -d \
	-v /var/run/docker.sock:/var/run/docker.sock \
	-v /tmp:/tmp:Z \
	-v "$LOG_PATH":/var/log/qsp-protocol/qsp-protocol.log:Z \
	-v "$RESOURCES_DIR/keystore":/app/resources/keystore:Z \
	-v "$RESOURCES_DIR/contracts":/app/resources/contracts:Z \
	-v "$RESOURCES_DIR/config.yaml":/app/resources/config.yaml:Z \
	-v "$RESOURCES_DIR/event_database.db":/root/.audit_node.db:Z \
	-e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
	-e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
	-e AWS_DEFAULT_REGION="us-east-1" \
	-e QSP_ETH_PASSPHRASE="$QSP_ETH_PASSPHRASE" \
	-e QSP_ETH_AUTH_TOKEN="$QSP_ETH_AUTH_TOKEN" \
	qsp-protocol-node sh -c "./bin/qsp-protocol-node -a $QSP_ENV $QSP_CONFIG"

echo $$ > /tmp/qsp-protocol.pid

# Tail the logs if not in background
if [ "$IN_BACKGROUND" == "false" ]; then
	while [ ! -f $LOG_PATH ]
	do
  		sleep 1
	done
	tail -f -n +1 $LOG_PATH
	docker logs --follow $(docker ps -a -q --latest --filter "status=running" --filter ancestor=qsp-protocol-node)
fi
