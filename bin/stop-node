#!/bin/bash

####################################################################################################
#                                                                                                  #
# (c) 2018, 2019 Quantstamp, Inc. This content and its use are governed by the license terms at    #
# <https://s3.amazonaws.com/qsp-protocol-license/V2_LICENSE.txt>                                   #
#                                                                                                  #
####################################################################################################

UNAME_OUT="$(uname -s)"
case "${UNAME_OUT}" in
	Linux*|linux*)     readonly SCRIPT_DIR=`dirname $(realpath "$0")`;;
	Darwin*|darwin*)   readonly SCRIPT_DIR=`dirname $(python -c "from __future__ import print_function; from os.path import realpath; from sys import argv; print(realpath(\"$0\"))")`;;
	*)          echo "Cannot determine OS type. Please make sure you are using Linux or Mac. If so, please open a github issue"; exit 1
esac

source "$SCRIPT_DIR/common"

function is_running () {
	ps -A -o pid | grep -q $1
    return $?
 }

FORCE=false
while getopts "f" FLAG; do
    case $FLAG in
        f)
            FORCE=true
            ;;
    esac
done

# Find all running qsp-protocol-nodes

if [[ $(docker ps -q --filter ancestor=qsp-protocol-node) ]]; then
    #Attach to the running container and stop the audit process.
    for container in $(docker ps -q --filter ancestor=qsp-protocol-node); do
        attempts=0
        echo "Stopping audit node container $container"
        docker exec -it $container bash -c 'PID=$(ps auxw | grep "python -W"| grep -v bin| grep -v grep| awk "{print \$1}") ;echo $PID ; kill $PID' > /dev/null
        #Wait for the audit node to stop
        while [[ $(docker inspect --format={{.State.Status}} $container) == "running" ]]; do
            echo "Waiting for audit node to stop" | tee -a $LOG_PATH
            sleep 2
            if [[ "$attempts" -eq 4 ]] && [[ "$FORCE" == "true" ]]; then
                echo "Failed to stop $container gracefully. Will try force stopping"
                docker kill $container
            elif [[ "$attempts" -eq 4 ]]; then
                echo "Failed to stop $container gracefully".
                echo "Please try running the script again with -f to forcefully stop the container."
                exit 1
            fi
            attempts=$((attempts + 1))
        done
        
        
        echo "Audit node stopped"
        RPID=`cat /tmp/qsp-protocol.pid`

        if is_running $RPID ; then
            echo "Start script is still running..."
            echo "Trying to kill..."
            kill -9 $RPID
            sleep 5
            if is_running $RPID ; then
                    echo "Cannot kill the previously launched start-script" | tee -a $LOG_PATH
            else
                    echo "Done (start-script killed)." | tee -a $LOG_PATH
            fi
        fi
    done
fi

